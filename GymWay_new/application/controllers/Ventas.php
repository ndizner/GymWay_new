<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Ventas extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Products_sale_model');
        $this->data = $this->generales->imports_generales();
        $this->load->library('form_validation');
        $this->load->model('Products_datum_model');
$this->data['active'] = 'Ventas';

    }

    /*
     * Listing of products_sales
     */
    function index()
    {
      $this->form_validation->set_rules('products_sales_date','Fecha','required');
  		if($this->form_validation->run())
          {

            $this->data['date'] = $this->input->post('products_sales_date');
            $dates = explode(' - ', $this->input->post('products_sales_date'));



        //  $this->data['products_sales'] = $this->Products_sale_model->get_all_products_sales('DATE(products_sales_date) BETWEEN "'. $dates[0]. '" and "'. $dates[1].'"');

         $this->data['products_sales'] = $this->Products_sale_model->get_all_products_sales(array('DATE(products_sales_date) >='=>date($this->config->item('query_date'), strtotime($dates[0])),'DATE(products_sales_date) <='=>date($this->config->item('query_date'), strtotime($dates[1])), 'products_sales_status'=>$this->config->item('Activo')));
          }else{
            $this->data['products_sales'] = $this->Products_sale_model->get_all_products_sales(array('DATE(products_sales_date)'=>date($this->config->item('query_date')),'products_sales_status'=>$this->config->item('Activo')));
          }

            $this->data['_view'] = 'products_sale/index';
            $this->load->view('layouts/main',$this->data);


    }

    /*
     * Adding a new products_sale
     */
    function add()
    {

		$this->form_validation->set_rules('products_sales_code','Producto','required');


		if($this->form_validation->run())
        {

          $this->data['products_datum'] = $this->Products_datum_model->get_products_datum($this->input->post('products_sales_code'));

          if(isset($this->data['products_datum']['product_id'])){

          $params = array(
            'products_sales_code' => $this->data['products_datum']['product_id'],
      			'products_sales_date' => date($this->config->item('date_format')),
      			'products_sales_name' => $this->data['products_datum']['product_name'],
      			'products_sales_amount' =>$this->data['products_datum']['product_cost_sale'],
      			'products_sales_user_id' => $this->data['sesion']->id,
      			'products_sales_status' => $this->config->item('Activo'),
          );

          $this->Products_datum_model->UpdateStock($this->data['products_datum']['product_id']);
          $products_sale_id = $this->Products_sale_model->add_products_sale($params);
            $this->session->set_flashdata('success', 'Venta ok');
          redirect('/');

            }else{
              $this->session->set_flashdata('error', 'Error al buscar el producto');
              redirect('/');
            }

        }
        else
        {
          $this->session->set_flashdata('error', form_error('products_sales_code'));
          redirect('/');
        }
    }

    /*
     * Editing a products_sale
     */
    function edit($products_sales_id)
    {
        // check if the products_sale exists before trying to edit it
        $data['products_sale'] = $this->Products_sale_model->get_products_sale($products_sales_id);

        if(isset($data['products_sale']['products_sales_id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('products_sales_user_id','Products Sales User Id','required');
			$this->form_validation->set_rules('products_sales_amount','Products Sales Amount','required');

			if($this->form_validation->run())
            {
                $params = array(
					'products_sales_date' => $this->input->post('products_sales_date'),
					'products_sales_name' => $this->input->post('products_sales_name'),
					'products_sales_amount' => $this->input->post('products_sales_amount'),
					'products_sales_user_id' => $this->input->post('products_sales_user_id'),
					'products_sales_status' => $this->input->post('products_sales_status'),
                );

                $this->Products_sale_model->update_products_sale($products_sales_id,$params);
                redirect('products_sale/index');
            }
            else
            {
                $data['_view'] = 'products_sale/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The products_sale you are trying to edit does not exist.');
    }

    /*
     * Deleting products_sale
     */
    function remove($products_sales_id)
    {
        $products_sale = $this->Products_sale_model->get_products_sale($products_sales_id);

        // check if the products_sale exists before trying to delete it
        if(isset($products_sale['products_sales_id']))
        {
            $this->Products_sale_model->delete_products_sale($products_sales_id);
            redirect('products_sale/index');
        }
        else
            show_error('The products_sale you are trying to delete does not exist.');
    }

}
